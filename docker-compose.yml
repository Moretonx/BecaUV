version: "3.8"

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    platform: linux/amd64
    container_name: sqlserver_becasuv  # Nombre del contenedor del SQL Server
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "M4sK@2025!"
      MSSQL_PID: "Developer"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - sql_backups:/var/opt/mssql/backup
    networks:
      - red_privada
    restart: always
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 6G

  init-db:
    image: mcr.microsoft.com/mssql-tools
    platform: linux/amd64
    networks:
      - red_privada
    depends_on:
      - sqlserver
    volumes:
      - sqlserver_data:/var/opt/mssql
      - sql_backups:/var/opt/mssql/backup
      - ./init-db.sh:/init-db.sh  # Montar el script en el contenedor
    command: /init-db.sh         # Ejecutar el script

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: backend_becasuv  # Nombre del contenedor del Backend
    restart: always
    expose:
      - "4000" # Solo expone internamente, no a puertos externos
    depends_on:
      - sqlserver
    networks:
      - red_privada
    environment:
      - DB_USER=sa
      - DB_PASSWORD=M4sK@2025!
      - DB_SERVER=sqlserver_becasuv  # Nombre del contenedor de SQL Server
      - DB_DATABASE=becas_uv
      - VIRTUAL_HOST=api.becas-informatica.uv.cl
      - VIRTUAL_PORT=4000

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: frontend_becasuv  # Nombre del contenedor del Frontend
    restart: always
    expose:
      - "80"  # Solo expone internamente
    networks:
      - red_privada
    environment:
      - API_URL=http://api.becas-informatica.uv.cl
      - VIRTUAL_HOST=becas-informatica.uv.cl
      - VIRTUAL_PORT=80

  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: always
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - red_privada
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend

networks:
  red_privada:
    driver: bridge

volumes:
  sqlserver_data:
    driver: local
  sql_backups:
    driver: local
